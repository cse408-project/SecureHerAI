name: Deploy SecureHerAI API to Azure VM

on:
  push:
    branches:
      - main
      - amin
      - ans2003
  workflow_dispatch:

jobs:
  deploy-api:
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}

      - name: Add Azure VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.AZURE_VM_HOST }}" >> ~/.ssh/known_hosts

      - name: Generate .env for API
        working-directory: secureherai-api
        run: |
          cat <<EOF > .env
          MAIL_HOST=${{ secrets.MAIL_HOST }}
          MAIL_PORT=${{ secrets.MAIL_PORT }}          
          MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}

          OAUTH2_CLIENT_ID=${{ vars.OAUTH2_CLIENT_ID }}
          OAUTH2_CLIENT_ID_ANDROID=${{ vars.OAUTH2_CLIENT_ID_ANDROID }}

          OAUTH2_CLIENT_SECRET=${{ secrets.OAUTH2_CLIENT_SECRET }}
          OAUTH2_WEB_ORIGIN=${{ vars.OAUTH2_WEB_ORIGIN }}
          OAUTH2_WEB_REDIRECT_URI=${{ vars.OAUTH2_WEB_REDIRECT_URI }}

          JWT_SECRET=${{ vars.JWT_SECRET }}
          JWT_EXPIRATION=${{ vars.JWT_EXPIRATION }}

          AZURE_SPEECH_KEY=${{ secrets.AZURE_SPEECH_KEY }}
          AZURE_SPEECH_REGION=${{ secrets.AZURE_SPEECH_REGION }}
          EOF

      - name: Copy code & .env to Azure VM and deploy
        run: |
          # Copy your API folder (including newly generated .env) up to the VM
          scp -r -o StrictHostKeyChecking=no secureherai-api \
            "${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}:~/"

          # SSH in and run docker-compose entirely on the VM
          ssh -o StrictHostKeyChecking=no "${{ secrets.AZURE_VM_USER }}@${{ secrets.AZURE_VM_HOST }}" << 'EOF'
            set -e

            cd ~/secureherai-api

            # (Re-)install Docker if missing
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker on VM..."
              curl -fsSL https://get.docker.com | sh
              sudo usermod -aG docker "$USER"
            fi

            # Tear down any old stack
            docker compose -f docker-compose-deploy.yml down --timeout 30 || true

            # Clean up old images
            docker image prune -f || true

            # Build all services and bring them up
            docker compose -f docker-compose-deploy.yml up -d --build

            # Show status
            docker compose -f docker-compose-deploy.yml ps

            # Optional: inspect API health
            echo "API health inside container:"
            docker exec secureherai_api curl -sf http://localhost:8080/api/isOk || echo "Health check failed"
          EOF
