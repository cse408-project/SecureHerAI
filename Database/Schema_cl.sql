-- PostgreSQL Schema for SecureHerAI Application
-- Women's Safety Application with AI Integration

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "postgis"; -- For geospatial data
CREATE EXTENSION IF NOT EXISTS "pgcrypto"; -- For password hashing

-- USERS AND AUTHENTICATION

-- User Roles
CREATE TYPE user_role AS ENUM ('user', 'responder', 'admin');

-- User table
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    full_name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    phone_number TEXT UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    date_of_birth DATE NOT NULL,
    profile_picture TEXT,
    role user_role NOT NULL DEFAULT 'user',
    is_active BOOLEAN DEFAULT TRUE,
    last_login TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Password reset tokens
CREATE TABLE password_reset_tokens (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    token TEXT NOT NULL,
    expires_at TIMESTAMPTZ NOT NULL,
    is_used BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT unique_valid_token UNIQUE (token, is_used)
);

-- Notification preferences
CREATE TABLE notification_preferences (
    user_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    email_alerts BOOLEAN DEFAULT TRUE,
    sms_alerts BOOLEAN DEFAULT TRUE,
    push_notifications BOOLEAN DEFAULT TRUE,
    journey_updates_start BOOLEAN DEFAULT TRUE,
    journey_updates_end BOOLEAN DEFAULT TRUE,
    journey_updates_deviation BOOLEAN DEFAULT TRUE,
    safety_alerts_high_risk_area BOOLEAN DEFAULT TRUE,
    safety_alerts_journey_delay BOOLEAN DEFAULT TRUE,
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Trusted contacts
CREATE TABLE trusted_contacts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    relationship TEXT,
    phone_number TEXT NOT NULL,
    email TEXT,
    notification_preferences JSONB NOT NULL DEFAULT '{"sms": true, "email": true, "push": true}'::JSONB,
    share_location BOOLEAN DEFAULT TRUE,
    status TEXT DEFAULT 'active',
    invitation_sent BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    CONSTRAINT unique_contact_per_user UNIQUE (user_id, phone_number)
);

-- RESPONDER MANAGEMENT

-- Responder details (extends users with role='responder')
CREATE TABLE responder_details (
    responder_id UUID PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    responder_type TEXT NOT NULL, -- police, medical, etc.
    badge_number TEXT UNIQUE,
    status TEXT NOT NULL DEFAULT 'available', -- available, busy, off_duty
    current_location JSONB, -- { latitude, longitude }
    current_assignment UUID, -- References SOS alerts
    last_status_update TIMESTAMPTZ DEFAULT NOW()
);

-- SOS ALERT SYSTEM

-- SOS Alerts
CREATE TABLE sos_alerts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    alert_id TEXT UNIQUE NOT NULL, -- sos-123456 format, generated by trigger
    user_id UUID NOT NULL REFERENCES users(id),
    trigger_method TEXT NOT NULL, -- manual, voice, automatic
    latitude NUMERIC(9,6) NOT NULL,
    longitude NUMERIC(9,6) NOT NULL,
    address TEXT,
    audio_recording TEXT,
    alert_message TEXT,
    status TEXT NOT NULL DEFAULT 'created', -- created, verified, active, help_dispatched, resolved, canceled, false_alarm
    verification_status TEXT DEFAULT 'pending', -- pending, verified, rejected
    verification_confidence DECIMAL(5,4),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Trigger to generate alert_id
CREATE OR REPLACE FUNCTION generate_alert_id()
RETURNS TRIGGER AS $$
BEGIN
    NEW.alert_id := 'sos-' || LPAD(NEXTVAL('sos_alert_id_seq')::TEXT, 6, '0');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE SEQUENCE IF NOT EXISTS sos_alert_id_seq START 100000;

CREATE TRIGGER set_alert_id
BEFORE INSERT ON sos_alerts
FOR EACH ROW EXECUTE FUNCTION generate_alert_id();

-- Alert verification details
CREATE TABLE alert_verifications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    sos_alert_id UUID NOT NULL REFERENCES sos_alerts(id) ON DELETE CASCADE,
    verification_method TEXT NOT NULL, -- voice_recognition, location_history, ai_analysis
    verified BOOLEAN,
    confidence DECIMAL(5,4),
    analysis_details JSONB, -- { voiceMatch, locationConsistency, patternAnalysis, etc }
    verified_by UUID REFERENCES users(id), -- User or system that performed verification
    verified_at TIMESTAMPTZ DEFAULT NOW()
);

-- Alert responder assignments
CREATE TABLE alert_responder_assignments (
    sos_alert_id UUID NOT NULL REFERENCES sos_alerts(id) ON DELETE CASCADE,
    responder_id UUID NOT NULL REFERENCES responder_details(responder_id) ON DELETE CASCADE,
    status TEXT NOT NULL DEFAULT 'assigned', -- assigned, en_route, arrived, completed
    eta TEXT,
    reason TEXT, -- Reason for acceptance/rejection
    assignment_time TIMESTAMPTZ DEFAULT NOW(),
    arrival_time TIMESTAMPTZ,
    completion_time TIMESTAMPTZ,
    notes TEXT,
    PRIMARY KEY (sos_alert_id, responder_id)
);

-- Alert notifications
CREATE TABLE alert_notifications (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    sos_alert_id UUID NOT NULL REFERENCES sos_alerts(id) ON DELETE CASCADE,
    contact_id UUID REFERENCES trusted_contacts(id) ON DELETE SET NULL,
    recipient_type TEXT NOT NULL, -- trusted_contact, emergency_service
    recipient_name TEXT NOT NULL,
    status TEXT NOT NULL, -- notified, notified_of_cancellation, failed
    notification_time TIMESTAMPTZ DEFAULT NOW()
);

-- SOS alert cancellations
CREATE TABLE sos_alert_cancellations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    sos_alert_id UUID NOT NULL REFERENCES sos_alerts(id) ON DELETE CASCADE,
    reason TEXT NOT NULL,
    additional_info TEXT,
    cancelled_at TIMESTAMPTZ DEFAULT NOW()
);

-- Voice command analysis
CREATE TABLE voice_analyses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    audio_data TEXT NOT NULL, -- URL or reference to stored audio
    language TEXT DEFAULT 'en-US',
    transcription TEXT,
    detected_keywords TEXT[], -- Array of keywords
    primary_emotion TEXT,
    confidence DECIMAL(5,4),
    intensity DECIMAL(5,4),
    secondary_emotions TEXT[],
    sentiment_score DECIMAL(5,4),
    action TEXT, -- trigger_sos, no_action
    processing_time TEXT,
    latitude NUMERIC(9,6),
    longitude NUMERIC(9,6),
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- JOURNEY TRACKING

-- Journey tracking
CREATE TABLE journeys (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    tracking_id TEXT UNIQUE NOT NULL, -- trip-123456 format, generated by trigger
    user_id UUID NOT NULL REFERENCES users(id),
    start_latitude NUMERIC(9,6) NOT NULL,
    start_longitude NUMERIC(9,6) NOT NULL,
    start_address TEXT,
    dest_latitude NUMERIC(9,6) NOT NULL,
    dest_longitude NUMERIC(9,6) NOT NULL,
    dest_address TEXT,
    status TEXT NOT NULL DEFAULT 'active', -- active, completed, canceled
    estimated_arrival_time TIMESTAMPTZ,
    actual_arrival_time TIMESTAMPTZ,
    sharing_url TEXT,
    route_polyline TEXT,
    safety_rating DECIMAL(3,2),
    total_distance TEXT,
    started_at TIMESTAMPTZ DEFAULT NOW(),
    ended_at TIMESTAMPTZ,
    feedback_rating INTEGER,
    feedback_comments TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Trigger to generate tracking_id
CREATE OR REPLACE FUNCTION generate_tracking_id()
RETURNS TRIGGER AS $$
BEGIN
    NEW.tracking_id := 'trip-' || LPAD(NEXTVAL('journey_tracking_id_seq')::TEXT, 6, '0');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE SEQUENCE IF NOT EXISTS journey_tracking_id_seq START 100000;

CREATE TRIGGER set_tracking_id
BEFORE INSERT ON journeys
FOR EACH ROW EXECUTE FUNCTION generate_tracking_id();

-- Journey location updates
CREATE TABLE journey_locations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    journey_id UUID NOT NULL REFERENCES journeys(id) ON DELETE CASCADE,
    latitude NUMERIC(9,6) NOT NULL,
    longitude NUMERIC(9,6) NOT NULL,
    timestamp TIMESTAMPTZ DEFAULT NOW(),
    updated_eta TIMESTAMPTZ,
    remaining_distance TEXT,
    safety_status JSONB -- { currentAreaRating, warnings }
);

-- Journey shared contacts
CREATE TABLE journey_shared_contacts (
    journey_id UUID NOT NULL REFERENCES journeys(id) ON DELETE CASCADE,
    contact_id UUID NOT NULL REFERENCES trusted_contacts(id) ON DELETE CASCADE,
    status TEXT DEFAULT 'notified', -- notified, notified_of_arrival
    notification_time TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (journey_id, contact_id)
);

-- HEAT MAP & SAFETY DATA

-- Safety reports
CREATE TABLE area_safety_reports (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    latitude NUMERIC(9,6) NOT NULL,
    longitude NUMERIC(9,6) NOT NULL,
    safety_rating INTEGER NOT NULL CHECK (safety_rating BETWEEN 1 AND 5),
    comment TEXT,
    time_of_day TEXT NOT NULL, -- morning, afternoon, evening, night
    categories TEXT[], -- Array of categories: lighting, isolation, etc.
    contribution_points INTEGER DEFAULT 5,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Area risk data (aggregated)
CREATE TABLE area_risk_data (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    latitude NUMERIC(9,6) NOT NULL,
    longitude NUMERIC(9,6) NOT NULL,
    risk_level TEXT NOT NULL, -- low, medium, high, extreme
    incident_count INTEGER DEFAULT 0,
    last_incident_time TIMESTAMPTZ,
    safety_score DECIMAL(3,2),
    contributing_reports INTEGER DEFAULT 0,
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Safe routes
CREATE TABLE safe_routes (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    route_id TEXT UNIQUE NOT NULL, -- route-123 format, generated by trigger
    start_latitude NUMERIC(9,6) NOT NULL,
    start_longitude NUMERIC(9,6) NOT NULL,
    end_latitude NUMERIC(9,6) NOT NULL,
    end_longitude NUMERIC(9,6) NOT NULL,
    polyline TEXT NOT NULL,
    safety_rating DECIMAL(3,2) NOT NULL,
    distance TEXT NOT NULL,
    duration TEXT NOT NULL,
    travel_mode TEXT NOT NULL, -- walking, driving, cycling
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Trigger to generate route_id
CREATE OR REPLACE FUNCTION generate_route_id()
RETURNS TRIGGER AS $$
BEGIN
    NEW.route_id := 'route-' || LPAD(NEXTVAL('safe_route_id_seq')::TEXT, 3, '0');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE SEQUENCE IF NOT EXISTS safe_route_id_seq START 100;

CREATE TRIGGER set_route_id
BEFORE INSERT ON safe_routes
FOR EACH ROW EXECUTE FUNCTION generate_route_id();

-- Route risk areas
CREATE TABLE route_risk_areas (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    route_id UUID NOT NULL REFERENCES safe_routes(id) ON DELETE CASCADE,
    latitude NUMERIC(9,6) NOT NULL,
    longitude NUMERIC(9,6) NOT NULL,
    risk_level TEXT NOT NULL, -- low, medium, high, extreme
    description TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Journey risk assessments
CREATE TABLE journey_risk_assessments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    start_latitude NUMERIC(9,6) NOT NULL,
    start_longitude NUMERIC(9,6) NOT NULL,
    dest_latitude NUMERIC(9,6) NOT NULL,
    dest_longitude NUMERIC(9,6) NOT NULL,
    travel_mode TEXT NOT NULL,
    planned_time TIMESTAMPTZ,
    overall_risk TEXT NOT NULL, -- low, medium, high, extreme
    risk_score DECIMAL(3,2) NOT NULL,
    recommendations TEXT[], -- Array of recommendations
    safer_routes TEXT[], -- Array of route_ids
    safer_times_of_day TEXT[], -- Array of suitable time ranges
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Risk assessment factors
CREATE TABLE risk_assessment_factors (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    assessment_id UUID NOT NULL REFERENCES journey_risk_assessments(id) ON DELETE CASCADE,
    factor TEXT NOT NULL, -- time_of_day, route_safety, incident_history, etc.
    risk TEXT NOT NULL, -- low, medium, high, extreme
    description TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- INCIDENT REPORTS

-- Incident reports
CREATE TABLE incident_reports (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    report_id TEXT UNIQUE NOT NULL, -- report-123456 format, generated by trigger
    user_id UUID REFERENCES users(id),
    responder_id UUID REFERENCES responder_details(responder_id), -- For reports from responders
    related_alert_id UUID REFERENCES sos_alerts(id) ON DELETE SET NULL,
    incident_type TEXT NOT NULL, -- harassment, theft, assault, other
    description TEXT NOT NULL,
    latitude NUMERIC(9,6) NOT NULL,
    longitude NUMERIC(9,6) NOT NULL,
    address TEXT,
    incident_time TIMESTAMPTZ NOT NULL,
    status TEXT NOT NULL DEFAULT 'submitted', -- submitted, under_review, resolved, archived
    visibility TEXT NOT NULL DEFAULT 'public', -- public, officials_only, private
    anonymous BOOLEAN DEFAULT FALSE,
    action_taken TEXT, -- For responder reports
    involved_parties JSONB, -- JSON containing involved parties
    submission_time TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Trigger to generate report_id
CREATE OR REPLACE FUNCTION generate_report_id()
RETURNS TRIGGER AS $$
BEGIN
    NEW.report_id := 'report-' || LPAD(NEXTVAL('incident_report_id_seq')::TEXT, 6, '0');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE SEQUENCE IF NOT EXISTS incident_report_id_seq START 100000;

CREATE TRIGGER set_report_id
BEFORE INSERT ON incident_reports
FOR EACH ROW EXECUTE FUNCTION generate_report_id();

-- Evidence files
CREATE TABLE evidence_files (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    evidence_id TEXT UNIQUE NOT NULL, -- evidence-456 format, generated by trigger
    report_id UUID REFERENCES incident_reports(id) ON DELETE CASCADE,
    alert_id UUID REFERENCES sos_alerts(id) ON DELETE SET NULL,
    file_type TEXT NOT NULL, -- image, video, audio
    file_url TEXT NOT NULL,
    file_size INTEGER NOT NULL, -- In bytes
    description TEXT,
    uploaded_by UUID REFERENCES users(id),
    uploaded_at TIMESTAMPTZ DEFAULT NOW()
);

-- Trigger to generate evidence_id
CREATE OR REPLACE FUNCTION generate_evidence_id()
RETURNS TRIGGER AS $$
BEGIN
    NEW.evidence_id := 'evidence-' || LPAD(NEXTVAL('evidence_id_seq')::TEXT, 3, '0');
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE SEQUENCE IF NOT EXISTS evidence_id_seq START 100;

CREATE TRIGGER set_evidence_id
BEFORE INSERT ON evidence_files
FOR EACH ROW EXECUTE FUNCTION generate_evidence_id();

-- Report comments
CREATE TABLE report_comments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    report_id UUID NOT NULL REFERENCES incident_reports(id) ON DELETE CASCADE,
    author UUID REFERENCES users(id),
    author_name TEXT NOT NULL, -- May be officials or user
    text TEXT NOT NULL,
    is_official BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Report actions
CREATE TABLE report_actions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    report_id UUID NOT NULL REFERENCES incident_reports(id) ON DELETE CASCADE,
    action_type TEXT NOT NULL, -- status_change, etc.
    from_state TEXT,
    to_state TEXT,
    performed_by TEXT NOT NULL, -- admin, user, system
    timestamp TIMESTAMPTZ DEFAULT NOW()
);

-- SYSTEM SETTINGS

-- System settings
CREATE TABLE system_settings (
    id INTEGER PRIMARY KEY DEFAULT 1,
    voice_detection_sensitivity DECIMAL(3,2) NOT NULL DEFAULT 0.8,
    emotion_detection_sensitivity DECIMAL(3,2) NOT NULL DEFAULT 0.7,
    heatmap_update_frequency TEXT NOT NULL DEFAULT 'hourly',
    data_retention_days INTEGER NOT NULL DEFAULT 90,
    default_heatmap_radius INTEGER NOT NULL DEFAULT 500,
    automatic_verification_enabled BOOLEAN DEFAULT TRUE,
    minimum_confidence_threshold DECIMAL(3,2) NOT NULL DEFAULT 0.75,
    require_secondary_verification BOOLEAN DEFAULT FALSE,
    police_number TEXT NOT NULL DEFAULT '999',
    emergency_helpline TEXT NOT NULL DEFAULT '112',
    automatic_police_notification BOOLEAN DEFAULT TRUE,
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    updated_by UUID REFERENCES users(id),
    CONSTRAINT singleton_system_settings CHECK (id = 1)
);

-- AI CHAT HELPER

-- Chat history
CREATE TABLE ai_chat_history (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    query TEXT NOT NULL,
    response TEXT NOT NULL,
    latitude NUMERIC(9,6),
    longitude NUMERIC(9,6),
    time_of_day TEXT, -- morning, afternoon, evening, night
    language TEXT DEFAULT 'en',
    assistance_level TEXT DEFAULT 'detailed',
    confidence DECIMAL(3,2),
    response_time TEXT,
    suggested_actions JSONB, -- JSON array of suggested actions
    safety_tips JSONB, -- JSON array of safety tips
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for performance optimization

-- User lookups
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_phone ON users(phone_number);

-- Location-based queries
CREATE INDEX idx_sos_alerts_location ON sos_alerts(latitude, longitude);
CREATE INDEX idx_journeys_locations ON journeys(start_latitude, start_longitude, dest_latitude, dest_longitude);
CREATE INDEX idx_area_safety_reports_location ON area_safety_reports(latitude, longitude);
CREATE INDEX idx_area_risk_data_location ON area_risk_data(latitude, longitude);

-- Alert status queries
CREATE INDEX idx_sos_alerts_status ON sos_alerts(status);
CREATE INDEX idx_sos_alerts_user ON sos_alerts(user_id);

-- Journey tracking
CREATE INDEX idx_journeys_user ON journeys(user_id);
CREATE INDEX idx_journeys_status ON journeys(status);

-- Report queries
CREATE INDEX idx_incident_reports_user ON incident_reports(user_id);
CREATE INDEX idx_incident_reports_status ON incident_reports(status);
CREATE INDEX idx_incident_reports_type ON incident_reports(incident_type);
CREATE INDEX idx_incident_reports_visibility ON incident_reports(visibility);

-- Responder queries
CREATE INDEX idx_responder_status ON responder_details(status);
CREATE INDEX idx_alert_responder_assignments ON alert_responder_assignments(responder_id, status);

-- Timestamps for range queries
CREATE INDEX idx_sos_alerts_created ON sos_alerts(created_at);
CREATE INDEX idx_journeys_times ON journeys(started_at, ended_at);
CREATE INDEX idx_incident_reports_time ON incident_reports(incident_time);

-- Full text search (if needed)
CREATE INDEX idx_incident_reports_description_trgm ON incident_reports USING gin(to_tsvector('english', description));
